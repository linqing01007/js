// 给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 。请你找出并返回那个只出现了一次的元素。

//  

// 示例 1：

// 输入：nums = [2,2,3,2]
// 输出：3
// 示例 2：

// 输入：nums = [0,1,0,1,0,1,99]
// 输出：99
//  

// 提示：

// 1 <= nums.length <= 3 * 104
// -231 <= nums[i] <= 231 - 1
// nums 中，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次
//  

// 进阶：你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

// 来源：力扣（LeetCode）
// 链接：https://leetcode-cn.com/problems/single-number-ii
// 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

/**
 * @param {number[]} nums
 * @return {number}
 */
 var singleNumber = function(nums) {
  // 方法一：哈希表统计数量
  // 方法二：由于nums[i]最多只有32位，因此分别计算答案的每一个二进制位是0还是1
  // 对于答案的第i个二进制位，可能为0或1.对于数组中的其他元素，每个元素都出现了3次，对应着第i个二进制位的3个0或3个1，无论是哪一种情况，他们的和都是3的倍数，因此
  // 答案的第i个二进制位就是数组中所有元素的第i个二进制位之和除以3的余数
  // 对于数组的每一个元素x，使用位运算(x >> i) & 1得到x的第i个二进制位，并将他们相加再对3取余，得到的结果一定为0或者1，即为答案的第i个二进制位。
  let ans = 0
  for (let i = 0; i < 32; i++) {
    let total = 0
    for (let num of nums) {
      total += (num >> i) & 1
    }
    if (total % 3 != 0) {
      ans |= (1 << i)
    }
  }
  return ans
};
console.log(singleNumber([1, 1, 1, 2, 3, 3, 3]))
